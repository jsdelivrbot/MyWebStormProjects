<?xml version="1.0" encoding="UTF-8"?>
<jboss-deployment-structure xmlns="urn:jboss:deployment-structure:1.2">
    <!-- Make sub deployments isolated by default, so they cannot see each others classes without a Class-Path entry -->
    <ear-subdeployments-isolated>true</ear-subdeployments-isolated>
    <!-- This corresponds to the top level deployment. For a war this is the war's module, for an ear -->
    <!-- This is the top level ear module, which contains all the classes in the EAR's lib folder     -->
    <deployment>
        <!-- exclude-subsystem prevents a subsystems deployment unit processors running on a deployment -->
        <!-- which gives basically the same effect as removing the subsystem, but it only affects single deployment -->
        <!--<exclude-subsystems>
            <subsystem name="resteasy" />
        </exclude-subsystems>-->
        <!-- Exclusions allow you to prevent the server from automatically adding some dependencies     -->
        <exclusions>
            <module name="com.h2database.h2" />
        </exclusions>
        <!-- This allows you to define additional dependencies, it is the same as using the Dependencies: manifest attribute -->
        <dependencies>
            <!--<module name="deployment.myjavassist" />-->
            <!-- Import META-INF/services for ServiceLoader impls as well -->
            <!--<module name="myservicemodule" services="import"/>-->
        </dependencies>
        <!-- These add additional classes to the module. In this case it is the same as including the jar in the EAR's lib directory -->
        <!--<resources>
            <resource-root path="my-library.jar" />
        </resources>-->
    </deployment>
    <sub-deployment name="JEERestService-1.0-SNAPSHOT.war">
        <exclusions>
            <module name="com.h2database.h2" />
        </exclusions>
        <!-- This corresponds to the module for a web deployment -->
        <!-- it can use all the same tags as the <deployment> entry above -->
        <dependencies>
            <module name="org.postgres" />
            <module name="com.fasterxml.jackson.jaxrs.jackson-jaxrs-json-provider" />
            <!-- Adds a dependency on a ejb jar. This could also be done with a Class-Path entry -->
            <!--<module name="deployment.myear.ear.myejbjar.jar" />-->
        </dependencies>
        <!-- Set's local resources to have the lowest priority -->
        <!-- If the same class is both in the sub deployment and in another sub deployment that -->
        <!-- is visible to the war, then the Class from the other deployment will be loaded,  -->
        <!-- rather than the class actually packaged in the war. -->
        <!-- This can be used to resolve ClassCastExceptions  if the same class is in multiple sub deployments-->
        <local-last value="false" />
    </sub-deployment>
    <!-- Now we are going to define two additional modules -->
    <!-- This one is a different version of javassist that we have packaged -->
    <!--<module name="deployment.myjavassist" >
        <resources>
            <resource-root path="javassist.jar" >
                &lt;!&ndash; We want to use the servers version of javassist.util.proxy.* so we filter it out&ndash;&gt;
                <filter>
                    <exclude path="javassist/util/proxy" />
                </filter>
            </resource-root>
        </resources>
    </module>-->
    <!-- This is a module that re-exports the containers version of javassist.util.proxy -->
    <!-- This means that there is only one version of the Proxy classes defined          -->
    <!--<module name="deployment.javassist.proxy" >
        <dependencies>
            <module name="org.javassist" >
                <imports>
                    <include path="javassist/util/proxy" />
                    <exclude path="/**" />
                </imports>
            </module>
        </dependencies>
    </module>-->
</jboss-deployment-structure>